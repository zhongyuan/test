
#Location Services
Gaia gives your applications access to the location services supported by the device through classes in the gaia package. The central component of the location framework is the LocationManager system service, which provides APIs to determine location and bearing of the underlying device (if available).

As with other system services, you can instantiate a LocationManager directly.

Once your application has a LocationManager, your application is able to do three things:

Query for the list of all LocationProviders for the last known user location.
Register/unregister for periodic updates of the user's current location from a location provider (specified either by criteria or name).
Register/unregister for a given Demand to be fired if the device comes within a given proximity (specified by radius in meters) of a given lat/long.

#Location Strategies
Knowing where the user is allows your application to be smarter and deliver better information to the user. When developing a location-aware application for Gaia, you can utilize GPS and Gaia Network Location Provider to acquire the user location. Although GPS is most accurate, it only works outdoors, it quickly consumes battery power, and does not return the location as quickly as users want. Gaia Network Location Provider determines user location using cell tower and Wi-Fi signals, providing location information in a way that works indoors and outdoors, responds faster, and uses less battery power. To obtain the user location in your application, you can use both GPS and the Network Location Provider, or just one.

#Challenges in Determining User Location
Obtaining user location from a mobile device can be complicated. There are several reasons why a location reading (regardless of the source) can contain errors and be inaccurate. Some sources of error in the user location include:

    Multitude of location sources:
        GPS, Cell-ID, and Wi-Fi can each provide a clue to users location. Determining which to use and trust is a matter of trade-offs in accuracy, speed, and battery-efficiency.
    User movement:
        Because the user location changes, you must account for movement by re-estimating user location every so often.
    Varying accuracy:
        Location estimates coming from each location source are not consistent in their accuracy. A location obtained 10 seconds ago from one source might be more accurate than the newest location from another or same source.

These problems can make it difficult to obtain a reliable user location reading. This document provides information to help you meet these challenges to obtain a reliable location reading. It also provides ideas that you can use in your application to provide the user with an accurate and responsive geo-location experience.

#Requesting Location Updates
Here is an introduction to how you can obtain user location on Gaia.

Getting user location in Gaia works by means of callback. You indicate that you'd like to receive location updates from the LocationManager by calling requestLocationUpdates(), passing it a LocationListener. Your LocationListener must implement several callback methods that the Location Manager calls when the user location changes or when the status of the service changes.

For example, the following code shows how to define a LocationListener and request location updates:

#Acquire a reference to the system Location Manager
gaia::connectivity::LocationManager* mpLocationManager = new LocationManager();

#Define a listener that responds to location updates
gaia::connectivity::LocationListener* mpLocationListener = new GpsLocationListener();

class GpsLocationListener: public LocationListener {
    public:
        explicit GpsLocationListener()
            : LocationListener() {
        }

        virtual ~GpsLocationListener() {
        }

        void onLocationChanged(const gaia::connectivity::Location& location) {
        }

        onStatusChanged(const gaia::base::String& provider, int32_t status, const gaia::core::Persistence& extras) {
        }

        void onProviderEnabled(const gaia::base::String& provider) {
        }

        void onProviderDisabled(const gaia::base::String& provider) {
        }
};

#Register the listener with the Location Manager to receive location updates
mpLocationManager->requestLocationUpdates(mpLocationManager->NETWORK_PROVIDER(), static_cast<int64_t>(0), static_cast<float>(0), *mpLocationListener);

The first parameter in requestLocationUpdates() is the type of location provider to use (in this case, the Network Location Provider for cell tower and Wi-Fi based location). You can control the frequency at which your listener receives updates with the second and third parameter—the second is the minimum time interval between notifications and the third is the minimum change in distance between notifications—setting both to zero requests location notifications as frequently as possible. The last parameter is your LocationListener, which receives callbacks for location updates.

To request location updates from the GPS provider, substitute GPS_PROVIDER for NETWORK_PROVIDER. You can also request location updates from both the GPS and the Network Location Provider by calling requestLocationUpdates() twice—once for NETWORK_PROVIDER and once for GPS_PROVIDER.

#Requesting User Permissions
In order to receive location updates from NETWORK_PROVIDER or GPS_PROVIDER, you must request user permission by declaring either the ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permission, respectively, in your Android manifest file.
Without these permissions, your application will fail at runtime when requesting location updates.

#Defining a Model for the Best Performance
Location-based applications are now commonplace, but due to the less than optimal accuracy, user movement, the multitude of methods to obtain the location, and the desire to conserve battery, getting user location is complicated. To overcome the obstacles of obtaining a good user location while preserving battery power, you must define a consistent model that specifies how your application obtains the user location. This model includes when you start and stop listening for updates and when to use cached location data.

#Flow for obtaining user location
Here's the typical flow of procedures for obtaining the user location:
    1. Start application.
    2. Sometime later, start listening for updates from desired location providers.
    3. Maintain a current best estimate of location by filtering out new, but less accurate fixes.
    4. Stop listening for location updates.
    5. Take advantage of the last best location estimate.

#Deciding when to start listening for updates
You might want to start listening for location updates as soon as your application starts, or only after users activate a certain feature. Be aware that long windows of listening for location fixes can consume a lot of battery power, but short periods might not allow for sufficient accuracy.

As demonstrated above, you can begin listening for updates by calling requestLocationUpdates():

String locationProvider = mpLocationManager->NETWORK_PROVIDER();
Or, use GPS location data:
String locationProvider = mpLocationManager->GPS_PROVIDER();
mpLocationManager->requestLocationUpdates(, static_cast<int64_t>(0), static_cast<float>(0), *mpLocationListener);

#Getting a fast fix with the last known location
The time it takes for your location listener to receive the first location fix is often too long for users wait. Until a more accurate location is provided to your location listener, you should utilize a cached location by calling getLastKnownLocation(String):

String locationProvider = mpLocationManager->NETWORK_PROVIDER();
Or use GPS location data:
String locationProvider = mpLocationManager->GPS_PROVIDER();
Location lastKnownLocation = mpLocationManager->getLastKnownLocation(locationProvider);

#Deciding when to stop listening for updates
The logic of deciding when new fixes are no longer necessary might range from very simple to very complex depending on your application. A short gap between when the location is acquired and when the location is used, improves the accuracy of the estimate. Always beware that listening for a long time consumes a lot of battery power, so as soon as you have the information you need, you should stop listening for updates by calling removeUpdates(const LocationListener& listener):

#Remove the listener you previously added
mpLocationManager->removeUpdates(*mpLocationListener);

#Adjusting the model to save battery and data exchange
As you test your application, you might find that your model for providing good location and good performance needs some adjustment. Here are some things you might change to find a good balance between the two.

#Reduce the size of the window
A smaller window in which you listen for location updates means less interaction with GPS and network location services, thus, preserving battery life. But it also allows for fewer locations from which to choose a best estimate.

#Set the location providers to return updates less frequently
Reducing the rate at which new updates appear during the window can also improve battery efficiency, but at the cost of accuracy. The value of the trade-off depends on how your application is used. You can reduce the rate of updates by increasing the parameters in requestLocationUpdates() that specify the interval time and minimum distance change.

#Restrict a set of providers
Depending on the environment where your application is used or the desired level of accuracy, you might choose to use only the Network Location Provider or only GPS, instead of both. Interacting with only one of the services reduces battery usage at a potential cost of accuracy.
