<h1>
    Drawer Animation
</h1>
Drawer animation lets you load a series of Drawer resources one after another to create an animation. This is a traditional animation in the sense that it is created with a sequence of different images, played in order, like a roll of film. The AnimationDrawer class is the basis for Drawer animations.

While you can define the frames of an animation in your code, using the AnimationDrawer class API, it's more simply accomplished with a single XML file that lists the frames that compose the animation. In this case, the instructions are the order and duration for each frame of the animation.

The XML file consists of an &lt;animation-list&gt; element as the root node and a series of child &lt;item&gt; nodes that each define a frame: a Drawer resource for the frame and the frame duration. Here's an example XML file for a Drawer animation:
<pre><code>
    &lt;animation-list xmlns:gaia="http://schemas.gaia.com/pkg/res/gaia"
        gaia:oneshot="true"&gt;
        &lt;item gaia:drawable="@drawable/animationdrawer_res1" gaia:duration="200" /&gt;
        &lt;item gaia:drawable="@drawable/animationdrawer_res2" gaia:duration="200" /&gt;
        &lt;item gaia:drawable="@drawable/animationdrawer_res3" gaia:duration="200" /&gt;
    &lt;/animation-list&gt;
</code></pre>
This animation runs for just three frames. By setting the gaia:oneshot attribute of the list to true, it will cycle just once then stop and hold on the last frame. If it is set false then the animation will loop. With this XML saved as animationdrawer_res.xml in the res/drawable/ directory of the project GAIA, it can be added as the background image to a Widget and then called to play. Here's an example Page, in which the animation is added to an ImageWidget and then animated when the screen is touched:
<pre><code>
    AnimationDrawer *mAnimationDrawer = NULL;

    void onInit(Persistence* const p) {

        ImageWidget *pImageWidget = new ImageWidget(this);
        pImageWidget->setBackgroundResource(GAIA::R::drawable::animationdrawer_res);
      
        mAnimationDrawer = static_cast<AnimationDrawer*> (pImageWidget->getBackgroundDrawer());
    }

    void ClickListener::onClick(Widget* widget) {
        switch (widget->getId()) {
            case 1: {
                mAnimationDrawer->start();
            }break;
        }
    }

    void onTear() {
      delete mAnimationDrawer;
    }
</code></pre>
<p> or you can try this sample without the XML file :</p>
<pre><code>
    void onInit(Persistence* const p) {
        mAnimationDrawer = new AnimationDrawer();
        mImageWidget = new ImageWidget(this);

        int32_t duration = 200;
        Context context(this);
        Resources* res = context.getResources();

        Bitmap* pBitmap = BitmapFactory::decodeResourceN(*res, GAIA::R::drawable::animationdrawer_res1);
        BitmapDrawer* pBitmapDrawer = new BitmapDrawer(res, pBitmap);
        mAnimationDrawer->addFrame(pBitmapDrawer, duration);
        delete pBitmap; pBitmap = NULL;
        delete pBitmapDrawer; pBitmapDrawer = NULL;

        Bitmap* pBitmap = BitmapFactory::decodeResourceN(*res, GAIA::R::drawable::animationdrawer_res2);
        BitmapDrawer* pBitmapDrawer = new BitmapDrawer(res, pBitmap);
        mAnimationDrawer->addFrame(pBitmapDrawer, duration);
        delete pBitmap; pBitmap = NULL;
        delete pBitmapDrawer; pBitmapDrawer = NULL;

        Bitmap* pBitmap = BitmapFactory::decodeResourceN(*res, GAIA::R::drawable::animationdrawer_res3);
        BitmapDrawer* pBitmapDrawer = new BitmapDrawer(res, pBitmap);
        mAnimationDrawer->addFrame(pBitmapDrawer, duration);
        delete pBitmap; pBitmap = NULL;
        delete pBitmapDrawer; pBitmapDrawer = NULL;

        mAnimationDrawer->setOneShot(true);

        mImageWidget->setBackgroundDrawer(mAnimationDrawer);
    }

    void ClickListener::onClick(Widget* widget) {
        switch (widget->getId()) {
            case 1: {
                mAnimationDrawer->start();
            }break;
        }
    }

    void onTear() {
      delete mAnimationDrawer;
      delete mImageWidget;
    }
</code></pre>
<p>
    It's important to note that the start() method called on the AnimationDrawer cannot be called during the onInit() method of your Page, because the AnimationDrawer is not yet fully attached to the window.
</p>
<p>
For more information on the XML syntax, available tags and attributes, see Animation Resources.
</p>
<a href=Animation.html>‚Üê Back to TwoDAnimation</a>
