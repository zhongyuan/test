#Widget Animation#
***
You can use the widget animation system to perform tweened animation on Widgets. Tween animation calculates the animation with information such as the start point, end point, size, rotation, and other common aspects of an animation.

A tween animation can perform a series of simple transformations (position, size, rotation, and transparency) on the contents of a Widget object. So, if you have a **TextWidget** object, you can move, rotate, grow, or shrink the text. If it has a background image, the background image will be transformed along with the text. The **gaia::animation** provides all the classes used in a tween animation.

The animation instructions define the transformations that you want to occur, when they will occur, and how long they should take to apply. Transformations can be sequential or simultaneous - for example, you can have the contents of a TextWidget move from left to right, and then rotate 180 degrees, or you can have the text move and rotate simultaneously. Each transformation takes a set of parameters specific for that transformation (starting size and ending size for size change, starting angle and ending angle for rotation, and so on), and also a set of common parameters (for instance, start time and duration). To make several transformations happen simultaneously, give them the same start time; to make them sequential, calculate the start time plus the duration of the preceding transformation.

Screen coordinates are (0,0) at the upper left hand corner, and increase as you go down and to the right.

Some values, such as pivotX, can be specified relative to the object itself or relative to the parent. Be sure to use the proper format for what you want ("50" for 50% relative to the parent, or "50%" for 50% relative to itself).

You can determine how a transformation is applied over time by assigning an **Interpolator**. Gaia includes several Interpolator subclasses that specify various speed curves: for instance, **AccelerateInterpolator** tells a transformation to start slow and speed up. Each one has an attribute value that can be applied in the XML.

As an alternative to **startAnimation()**, you can define a starting time for the animation with **Animation::setStartTime()**, then assign the animation to the Widget with **Widget::setAnimation()**.

**Note:** Regardless of how your animation may move or resize, the bounds of the Widget that holds your animation will not automatically adjust to accommodate it. Even so, the animation will still be drawn beyond the bounds of its Widget and will not be clipped. However, clipping will occur if the animation exceeds the bounds of the parent Widget.
