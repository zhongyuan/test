#Page#

***syntax:***

        <page gaia:allowTaskReparenting=["true" | "false"]
              gaia:alwaysRetainTaskState=["true" | "false"]
              gaia:clearTaskOnLaunch=["true" | "false"]
              gaia:configChanges=["mcc", "mnc", "locale",
                                  "touchscreen", "keyboard", "keyboardHidden",
                                  "navigation", "screenLayout", "fontScale", "uiMode",
                                  "orientation", "screenSize", "smallestScreenSize"]
              gaia:enabled=["true" | "false"]
              gaia:excludeFromRecents=["true" | "false"]
              gaia:exported=["true" | "false"]
              gaia:finishOnTaskLaunch=["true" | "false"]
              gaia:hardwareAccelerated=["true" | "false"]
              gaia:icon="drawable resource"
              gaia:label="string resource"
              gaia:launchMode=["multiple" | "singleTop" |
                               "singleTask" | "singleInstance"]
              gaia:multiprocess=["true" | "false"]
              gaia:name="string"
              gaia:noHistory=["true" | "false"]
              gaia:parentPageName="string"
              gaia:permission="string"
              gaia:process="string"
              gaia:screenOrientation=["unspecified" | "user" | "behind" |
                                      "landscape" | "portrait" |
                                      "reverseLandscape" | "reversePortrait" |
                                      "sensorLandscape" | "sensorPortrait" |
                                      "sensor" | "fullSensor" | "nosensor"]
              gaia:stateNotNeeded=["true" | "false"]
              gaia:taskAffinity="string"
              gaia:theme="resource or theme"
              gaia:uiOptions=["none" | "splitActionBarWhenNarrow"]
              gaia:windowSoftInputMode=["stateUnspecified",
                                        "stateUnchanged", "stateHidden",
                                        "stateAlwaysHidden", "stateVisible",
                                        "stateAlwaysVisible", "adjustUnspecified",
                                        "adjustResize", "adjustPan"] >
            ...
        </page>

##Contained in:##

>    [Application](Manifest/Application.html)

##Can contain:##

>    [Demand Filter](Manifest/Demand Filter.html)<br>
>    [Meta Data](Manifest/Meta Data.html)

##Description:##

Declares a page (a Page subclass) that implements part of the application's visual user interface. All pages must be represented by <page> elements in the manifest file. Any that are not declared there will not be seen by the system and will never be run.

##Attributes:##

***gaia:allowTaskReparenting***<br>
Whether or not the page can move from the task that started it to the task it has an affinity for when that task is next brought to the front - "true" if it can move, and "false" if it must remain with the task where it started.

If this attribute is not set, the value set by the corresponding allowTaskReparenting attribute of the [Application](Manifest/Application.html) element applies to the page. The default value is "false".

Normally when a page is started, it's associated with the task of the page that started it and it stays there for its entire lifetime. You can use this attribute to force it to be re-parented to the task it has an affinity for when its current task is no longer displayed.

Typically, it's used to cause the pages of an application to move to the main task associated with that application.
For example, if an e-mail message contains a link to a web page, clicking the link brings up a page that can display the page. That page is defined by the browser application, but is launched as part of the e-mail task. If it's reparented to the browser task, it will be shown when the browser next comes to the front, and will be absent when the e-mail task again comes forward.

The affinity of a page is defined by the taskAffinity attribute. The affinity of a task is determined by reading the affinity of its root page. Therefore, by definition, a root page is always in a task with the same affinity. Since pages with "singleTask" or "singleInstance" launch modes can only be at the root of a task, re-parenting is limited to the "standard" and "singleTop" modes. (See also the launchMode attribute.)

***gaia:alwaysRetainTaskState***<br>
Whether or not the state of the task that the page is in will always be maintained by the system-"true" if it will be, and "false" if the system is allowed to reset the task to its initial state in certain situations. The default value is "false". This attribute is meaningful only for the root page of a task; it's ignored for all other pages.

Normally, the system clears a task (removes all pages from the stack above the root page) in certain situations when the user re-selects that task from the home screen. Typically, this is done if the user hasn't visited the task for a certain amount of time, such as 30 minutes.

However, when this attribute is "true", users will always return to the task in its last state, regardless of how they get there. This is useful, for example, in an application like the web browser where there is a lot of state (such as multiple open tabs) that users would not like to lose.

***gaia:clearTaskOnLaunch***<br>
Whether or not all pages will be removed from the task, except for the root page, whenever it is re-launched from the home screen - "true" if the task is always stripped down to its root page, and "false" if not. The default value is "false". This attribute is meaningful only for pages that start a new task (the root page); it's ignored for all other pages in the task.

When the value is "true", every time users start the task again, they are brought to its root page regardless of what they were last doing in the task and regardless of whether they used the Back or Home button to leave it. When the value is "false", the task may be cleared of pages in some situations (see the alwaysRetainTaskState attribute), but not always.

Suppose, for example, that someone launches page P from the home screen, and from there goes to page Q. The user next presses Home, and then returns to page P. Normally, the user would see page Q, since that is what they were last doing in P's task. However, if P set this flag to "true", all of the pages on top of it (Q in this case) were removed when the user pressed Home and the task went to the background. So the user sees only P when returning to the task.

If this attribute and allowTaskReparenting are both "true", any pages that can be re-parented are moved to the task they share an affinity with; the remaining pages are then dropped, as described above.

***gaia:configChanges***<br>
Lists configuration changes that the page will handle itself. When a configuration change occurs at runtime, the page is shut down and restarted by default, but declaring a configuration with this attribute will prevent the page from being restarted. Instead, the page remains running and its onConfigurationChanged() method is called.

**Note:** Using this attribute should be avoided and used only as a last-resort. Please read Handling Runtime Changes for more information about how to properly handle a restart due to a configuration change.

Any or all of the following strings are valid values for this attribute. Multiple values are separated by '|', for example, "locale|navigation|orientation".

<table border="1" width="1000">
<tr><th>Value</th><th>Description</th></tr>
<tr>
  <td>mcc</td>
  <td>The IMSI mobile country code (MCC) has changed - a SIM has been detected and updated the MCC.</td>
</tr>
<tr>
  <td>mnc</td>
  <td>The IMSI mobile network code (MNC) has changed - a SIM has been detected and updated the MNC.</td>
</tr>
<tr>
  <td>locale</td>
  <td>The locale has changed-the user has selected a new language that text should be displayed in.</td>
</tr>
<tr>
  <td>touchscreen</td>
  <td>The touchscreen has changed. (This should never normally happen.)</td>
</tr>
<tr>
  <td>keyboard</td>
  <td>The keyboard type has changed - for example, the user has plugged in an external keyboard.</td>
</tr>
<tr>
  <td>keyboardHidden</td>
  <td>The keyboard accessibility has changed - for example, the user has revealed the hardware keyboard.</td>
</tr> 	
<tr>
  <td>navigation</td>
  <td>The navigation type (trackball/dpad) has changed. (This should never normally happen.)</td>
</tr>
<tr>
  <td>screenLayout</td>
  <td>The screen layout has changed - this might be caused by a different display being activated.</td>
</tr>
<tr>
  <td>fontScale</td>
  <td>The font scaling factor has changed - the user has selected a new global font size.</td>
</tr>
<tr>
  <td>uiMode</td>
  <td>The user interface mode has changed - this can be caused when the user places the device into a desk/car dock or when the night mode changes. See [UiModeManager]. Added in API level 8.</td>
</tr>
<tr>
  <td>orientation</td>
  <td>The screen orientation has changed - the user has rotated the device.
**Note:** If your application targets API level 13 or higher (as declared by the minSdkVersion and targetSdkVersion attributes), then you should also declare the "screenSize" configuration, because it also changes when a device switches between portrait and landscape orientations.</td>
</tr>
<tr>
  <td>screenSize</td>
  <td>The current available screen size has changed. This represents a change in the currently available size, relative to the current aspect ratio, so will change when the user switches between landscape and portrait. However, if your application targets API level 12 or lower, then your page always handles this configuration change itself (this configuration change does not restart your page, even when running on a Gaia 3.2 or higher device).

        Added in API level 1.</td>
</tr>
<tr>
  <td>smallestScreenSize</td>
  <td>The physical screen size has changed. This represents a change in size regardless of orientation, so will only change when the actual physical screen size has changed such as switching to an external display. A change to this configuration corresponds to a change in the [smallestWidth configuration]. However, if your application targets API level 12 or lower, then your page always handles this configuration change itself (this configuration change does not restart your page, even when running on a Gaia 3.2 or higher device).

        Added in API level 1.</td>
</tr>
<tr>
  <td>layoutDirection</td>
  <td>The layout direction has changed. For example, changing from left-to-right (LTR) to right-to-left (RTL). Added in API level 17.</td>
</tr>	
</table>

All of these configuration changes can impact the resource values seen by the application. Therefore, when [onConfigurationChanged()] is called, it will generally be necessary to again retrieve all resources (including view layouts, drawables, and so on) to correctly handle the change.

***gaia:enabled***<br>
Whether or not the page can be instantiated by the system - "true" if it can be, and "false" if not. The default value is "true".

The <application> element has its own enabled attribute that applies to all application components, including pages. The [Application](Manifest/Application.html) and [Page](Manifest/Page.html) attributes must both be "true" (as they both are by default) for the system to be able to instantiate the page. If either is "false", it cannot be instantiated.

***gaia:excludeFromRecents***<br>
Whether or not the task initiated by this page should be excluded from the list of recently used applications ("recent apps"). That is, when this page is the root page of a new task, this attribute determines whether the task should not appear in the list of recent apps. "true" if the task should be excluded from the list; "false" if it should be included. The default value is "false".

***gaia:exported***<br>
Whether or not the page can be launched by components of other applications - "true" if it can be, and "false" if not. If "false", the page can be launched only by components of the same application or applications with the same user ID.

The default value depends on whether the page contains demand filters. The absence of any filters means that the page can be invoked only by specifying its exact class name. This implies that the page is intended only for application-internal use (since others would not know the class name). So in this case, the default value is "false". On the other hand, the presence of at least one filter implies that the page is intended for external use, so the default value is "true".

This attribute is not the only way to limit a page's exposure to other applications. You can also use a permission to limit the external entities that can invoke the page (see the [permission] attribute).

***gaia:finishOnTaskLaunch***<br>
Whether or not an existing instance of the page should be shut down (finished) whenever the user again launches its task (chooses the task on the home screen) - "true" if it should be shut down, and "false" if not. The default value is "false".

If this attribute and [allowTaskReparenting] are both "true", this attribute trumps the other. The affinity of the page is ignored. The page is not re-parented, but destroyed.

***gaia:hardwareAccelerated***<br>
Whether or not hardware-accelerated rendering should be enabled for this page - "true" if it should be enabled, and "false" if not. The default value is "false".

Starting from Gaia 3.0, a hardware-accelerated OpenGL renderer is available to applications, to improve performance for many common 2D graphics operations. When the hardware-accelerated renderer is enabled, most operations in Canvas, Paint, Xfermode, ColorFilter, Shader, and Camera are accelerated. This results in smoother animations, smoother scrolling, and improved responsiveness overall, even for applications that do not explicitly make use the framework's OpenGL libraries. Because of the increased resources required to enable hardware acceleration, your app will consume more RAM.

Note that not all of the OpenGL 2D operations are accelerated. If you enable the hardware-accelerated renderer, test your application to ensure that it can make use of the renderer without errors.

***gaia:icon***<br>
An icon representing the page. The icon is displayed to users when a representation of the page is required on-screen. For example, icons for pages that initiate tasks are displayed in the launcher window. The icon is often accompanied by a label (see the [gaia:label] attribute).

This attribute must be set as a reference to a drawable resource containing the image definition. If it is not set, the icon specified for the [application] as a whole is used instead (see the <application> element's icon attribute).

The page's icon - whether set here or by the <application> element - is also the default icon for all the page's demand filters (see the <demand-filter> element's icon attribute).

***gaia:label***<br>
A user-readable label for the page. The label is displayed on-screen when the page must be represented to the user. It's often displayed along with the page icon.

If this attribute is not set, the label set for the application as a whole is used instead (see the [application >] element's label attribute).

The page's label - whether set here or by the <application> element-is also the default label for all the page's demand filters (see the [Demand Filter](Manifest/Demand Filter.html) element's label attribute).

The label should be set as a reference to a string resource, so that it can be localized like other strings in the user interface. However, as a convenience while you're developing the application, it can also be set as a raw string.

***gaia:launchMode***<br>
An instruction on how the page should be launched. There are four modes that work in conjunction with page flags (FLAG_PAGE_* constants) in demand objects to determine what should happen when the page is called upon to handle a demand. They are:

      ["standard"]
      ["singleTop"]
      ["singleTask"]
      ["singleInstance"]

      The default mode is "[standard]".

As shown in the table below, the modes fall into two main groups, with "standard" and "singleTop" pages on one side, and "singleTask" and "singleInstance" pages on the other. A page with the "standard" or "singleTop" launch mode can be instantiated multiple times. The instances can belong to any task and can be located anywhere in the page stack. Typically, they're launched into the task that called [startPage()] (unless the demand object contains a FLAG_PAGE_NEW_TASK instruction, in which case a different task is chosen - see the taskAffinity attribute).

In contrast, "singleTask" and "singleInstance" pages can only begin a task. They are always at the root of the page stack. Moreover, the device can hold only one instance of the page at a time - only one such task.

The "standard" and "singleTop" modes differ from each other in just one respect: Every time there's a new demand for a "standard" page, a new instance of the class is created to respond to that demand. Each instance handles a single demand. Similarly, a new instance of a "singleTop" page may also be created to handle a new demand. However, if the target task already has an existing instance of the page at the top of its stack, that instance will receive the new demand (in an onNewIntent() call); a new instance is not created. In other circumstances - for example, if an existing instance of the "singleTop" page is in the target task, but not at the top of the stack, or if it's at the top of a stack, but not in the target task - a new instance would be created and pushed on the stack.

The "singleTask" and "singleInstance" modes also differ from each other in only one respect: A "singleTask" page allows other pages to be part of its task. It's always at the root of its task, but other pages (necessarily "standard" and "singleTop" pages) can be launched into that task. A "singleInstance" page, on the other hand, permits no other pages to be part of its task. It's the only page in the task. If it starts another page, that page is assigned to a different task - as if FLAG_PAGE_NEW_TASK was in the demand.

<table border="1" width="1000">
<tr><th>Use Cases</th><th>Launch Mode</th><th>Multiple Instances?</th><th>Comments</th></tr>
<tr>
  <td>Normal launches for most pages</td>
  <td>standard</td>
  <td>Yes</td>
  <td>Default. The system always creates a new instance of the page in the target task and routes the demand to it.</td>
</tr>
<tr>
  <td></td>
  <td>singleTop</td>
  <td>Conditionally</td>
  <td>If an instance of the page already exists at the top of the target task, the system routes the demand to that instance through a call to its onNewIntent() method, rather than creating a new instance of the page.</td>
</tr>
<tr>
  <td>Specialized launches
     (not recommended for general use)</td>
  <td>singleTask</td>
  <td>No</td>
  <td>The system creates the page at the root of a new task and routes the demand to it. However, if an instance of the page already     exists, the system routes the demand to existing instance through a call to its onNewIntent() method, rather than creating a new one.</td>
</tr>
<tr>
  <td></td>
  <td>singleInstance</td>
  <td>No</td>
  <td>Same as "singleTask", except that the system doesn't launch any other pages into the task holding the instance. The page is always the single and only member of its task.</td>
</tr>
</table>      	 	 	   	 	

As shown in the table above, standard is the default mode and is appropriate for most types of pages. SingleTop is also a common and useful launch mode for many types of pages. The other modes - singleTask and singleInstance - are not appropriate for most applications, since they result in an interaction model that is likely to be unfamiliar to users and is very different from most other applications.

Regardless of the launch mode that you choose, make sure to test the usability of the page during launch and when navigating back to it from other pages and tasks using the Back button.

For more information on launch modes and their interaction with demand flags, see the Tasks and Back Stack document.

***gaia:multiprocess***<br>
Whether an instance of the page can be launched into the process of the component that started it - "true" if it can be, and "false" if not. The default value is "false".

Normally, a new instance of an page is launched into the process of the application that defined it, so all instances of the page run in the same process. However, if this flag is set to "true", instances of the page can run in multiple processes, allowing the system to create instances wherever they are used (provided permissions allow it), something that is almost never necessary or desirable.

***gaia:name***<br>
The name of the class that implements the page, a subclass of Page. The attribute value should be a fully qualified class name (such as, "com.example.project.ExtracurricularPage"). However, as a shorthand, if the first character of the name is a period (for example, ".ExtracurricularPage"), it is appended to the package name specified in the <manifest> element.

Once you publish your application, you should not change this name (unless you've set gaia:exported="false").

There is no default. The name must be specified.

***gaia:noHistory***<br>
Whether or not the page should be removed from the page stack and finished (its finish() method called) when the user navigates away from it and it's no longer visible on screen - "true" if it should be finished, and "false" if not. The default value is "false".

A value of "true" means that the page will not leave a historical trace. It will not remain in the page stack for the task, so the user will not be able to return to it.

This attribute was introduced in API Level 3.

***gaia:parentPageName***<br>
The class name of the logical parent of the page. The name here must be formatted the same as the corresponding page is declared in its own gaia:name.

The system reads this attribute to determine which page should be started when the use presses the Up button in the action bar. The system can also use this information to synthesize a back stack of pages with TaskStackBuilder.

This attribute was introduced in API Level 16.

***gaia:permission***<br>
The name of a permission that clients must have to launch the page or otherwise get it to respond to a demand. If a caller of startPage() or startPageForResult() has not been granted the specified permission, its demand will not be delivered to the page.

If this attribute is not set, the permission set by the <application> element's permission attribute applies to the page. If neither attribute is set, the page is not protected by a permission.

For more information on permissions, see the Permissions section in the introduction and another document, Security and Permissions.

***gaia:process***<br>
The name of the process in which the page should run. Normally, all components of an application run in the default process created for the application. It has the same name as the application package. The <application> element's process attribute can set a different default for all components. But each component can override the default, allowing you to spread your application across multiple processes.

If the name assigned to this attribute begins with a colon (':'), a new process, private to the application, is created when it's needed and the page runs in that process. If the process name begins with a lowercase character, the page will run in a global process of that name, provided that it has permission to do so. This allows components in different applications to share a process, reducing resource usage.

***gaia:screenOrientation***<br>
The orientation of the page's display on the device.

The value can be any one of the following strings:

<table border="1" width="1000">
<tr>
  <td>unspecified</td>
  <td>The default value. The system chooses the orientation. The policy it uses, and therefore the choices made in specific contexts, may differ from device to device.</td>
</tr>
<tr>
  <td>user</td>
  <td>The user's current preferred orientation.</td>
</tr>
<tr>
  <td>behind</td>
  <td>The same orientation as the page that's immediately beneath it in the page stack.</td>
</tr>
<tr>
  <td>landscape</td>
  <td>Landscape orientation (the display is wider than it is tall).</td>
</tr>
<tr>
  <td>portrait</td>
  <td>Portrait orientation (the display is taller than it is wide).</td>
</tr>
<tr>
  <td>reverseLandscape</td>
  <td>Landscape orientation in the opposite direction from normal landscape. Added in API level 9.</td>
</tr>
<tr>
  <td>reversePortrait</td>
  <td>Portrait orientation in the opposite direction from normal portrait. Added in API level 9.</td>
</tr>
<tr>
  <td>sensorLandscape</td>
  <td>Landscape orientation, but can be either normal or reverse landscape based on the device sensor. Added in API level 9.</td>
</tr>
<tr>
  <td>sensorPortrait</td>
  <td>Portrait orientation, but can be either normal or reverse portrait based on the device sensor. Added in API level 9.</td>
</tr>
<tr>
  <td>sensor</td>
  <td>The orientation is determined by the device orientation sensor. The orientation of the display depends on how the user is holding the device; it changes when the user rotates the device. Some devices, though, will not rotate to all four possible orientations, by default. To allow all four orientations, use "fullSensor".</td>
</tr>
<tr>
  <td>fullSensor</td>
  <td>The orientation is determined by the device orientation sensor for any of the 4 orientations. This is similar to "sensor" except this allows any of the 4 possible screen orientations, regardless of what the device will normally do (for example, some devices won't normally use reverse portrait or reverse landscape, but this enables those). Added in API level 9.</td>
</tr>
<tr>
  <td>nosensor</td>
  <td>The orientation is determined without reference to a physical orientation sensor. The sensor is ignored, so the display will not rotate based on how the user moves the device. Except for this distinction, the system chooses the orientation using the same policy as for the "unspecified" setting.</td>
</tr>
</table>
         	
**Note:** When you declare one of the landscape or portrait values, it is considered a hard requirement for the orientation in which the page runs. As such, the value you declare enables filtering by services such as Google Play so your application is available only to devices that support the orientation required by your pages. For example, if you declare either "landscape", "reverseLandscape", or "sensorLandscape", then your application will be available only to devices that support landscape orientation. However, you should also explicitly declare that your application requires either portrait or landscape orientation with the [Uses Feature](Manifest/Uses Feature.html) element. For example, <uses-feature gaia:name="android.hardware.screen.portrait"/>. This is purely a filtering behavior provided by Google Play (and other services that support it) and the platform itself does not control whether your app can be installed when a device supports only certain orientations.

***gaia:stateNotNeeded***<br>
Whether or not the page can be killed and successfully restarted without having saved its state - "true" if it can be restarted without reference to its previous state, and "false" if its previous state is required. The default value is "false".

Normally, before a page is temporarily shut down to save resources, its onSaveInstanceState() method is called. This method stores the current state of the page in a Bundle object, which is then passed to onCreate() when the page is restarted. If this attribute is set to "true", onSaveInstanceState() may not be called and onCreate() will be passed null instead of the Bundle - just as it was when the page started for the first time.

A "true" setting ensures that the page can be restarted in the absence of retained state. For example, the page that displays the home screen uses this setting to make sure that it does not get removed if it crashes for some reason.

***gaia:taskAffinity***<br>
The task that the page has an affinity for. Pages with the same affinity conceptually belong to the same task (to the same "application" from the user's perspective). The affinity of a task is determined by the affinity of its root page.

The affinity determines two things - the task that the page is re-parented to (see the allowTaskReparenting attribute) and the task that will house the page when it is launched with the FLAG_PAGE_NEW_TASK flag.

By default, all pages in an application have the same affinity. You can set this attribute to group them differently, and even place pages defined in different applications within the same task. To specify that the page does not have an affinity for any task, set it to an empty string.

If this attribute is not set, the page inherits the affinity set for the application (see the [Application](Manifest/Application.html) element's taskAffinity attribute). The name of the default affinity for an application is the package name set by the [Config](Manifest/Config.html) element.

***gaia:theme***<br>
A reference to a style resource defining an overall theme for the page. This automatically sets the page's context to use this theme (see setTheme(), and may also cause "starting" animations prior to the page being launched (to better match what the page actually looks like).

If this attribute is not set, the page inherits the theme set for the application as a whole - from the <application> element's theme attribute. If that attribute is also not set, the default system theme is used. For more information, see the Styles and Themes developer guide.

***gaia:uiOptions***<br>
Extra options for a page's UI.

Must be one of the following values.

<table border="1" width="1000">
<tr><th>Value</th><th>Description</th></tr>
<tr>
  <td>none</td>
  <td>No extra UI options. This is the default.</td>
</tr>
<tr>
  <td>splitActionBarWhenNarrow</td>
  <td>Add a bar at the bottom of the screen to display action items in the ActionBar, when constrained for horizontal space (such as when in portrait mode on a handset). Instead of a small number of action items appearing in the action bar at the top of the screen, the action bar is split into the top navigation section and the bottom bar for action items. This ensures a reasonable amount of space is made available not only for the action items, but also for navigation and title elements at the top. Menu items are not split across the two bars; they always appear together.</td>
</tr>
</table>
        	
For more information about the action bar, see the Action Bar developer guide.

This attribute was added in API level 14.

***gaia:windowSoftInputMode***<br>
How the main window of the page interacts with the window containing the on-screen soft keyboard. The setting for this attribute affects two things:

* The state of the soft keyboard - whether it is hidden or visible - when the page becomes the focus of user attention.
* The adjustment made to the page's main window - whether it is resized smaller to make room for the soft keyboard or whether its contents pan to make the current focus visible when part of the window is covered by the soft keyboard.

The setting must be one of the values listed in the following table, or a combination of one "state..." value plus one "adjust..." value. Setting multiple values in either group - multiple "state..." values, for example - has undefined results. Individual values are separated by a vertical bar (|). For example:

        <page gaia:windowSoftInputMode="stateVisible|adjustResize" ... >

Values set here (other than "stateUnspecified" and "adjustUnspecified") override values set in the theme.

<table border="1" width="1000">
<tr><th>Value</th><th>Description</th></tr>
<tr>
  <td>stateUnspecified</td>
  <td>The state of the soft keyboard (whether it is hidden or visible) is not specified. The system will choose an appropriate state or rely on the setting in the theme.

        This is the default setting for the behavior of the soft keyboard.</td>
</tr>
<tr>
  <td>stateUnchanged</td>
  <td>The soft keyboard is kept in whatever state it was last in, whether visible or hidden, when the page comes to the fore.</td>
</tr>
<tr>
  <td>stateHidden</td>
  <td>The soft keyboard is hidden when the user chooses the page - that is, when the user affirmatively navigates forward to the page, rather than backs into it because of leaving another page.</td>
</tr>
<tr>
  <td>stateAlwaysHidden</td>
  <td>The soft keyboard is always hidden when the page's main window has input focus.</td>
</tr>
<tr>
  <td>stateVisible</td>
  <td>The soft keyboard is visible when that's normally appropriate (when the user is navigating forward to the page's main window).</td>
</tr>
<tr>
  <td>stateAlwaysVisible</td>
  <td>The soft keyboard is made visible when the user chooses the page - that is, when the user affirmatively navigates forward to the page, rather than backs into it because of leaving another page.</td>
</tr>
<tr>
  <td>adjustUnspecified</td>
  <td>It is unspecified whether the page's main window resizes to make room for the soft keyboard, or whether the contents of the window pan to make the currentfocus visible on-screen. The system will automatically select one of these modes depending on whether the content of the window has any layout views that can scroll their contents. If there is such a view, the window will be resized, on the assumption that scrolling can make all of the window's contents visible within a smaller area.

        This is the default setting for the behavior of the main window.</td>
</tr>
<tr>
  <td>adjustResize</td>
  <td>The page's main window is always resized to make room for the soft keyboard on screen.</td>
</tr>
<tr>
  <td>adjustPan</td>
  <td>The page's main window is not resized to make room for the soft keyboard. Rather, the contents of the window are automatically panned so that the current focus is never obscured by the keyboard and users can always see what they are typing. This is generally less desirable than resizing, because the user may need to close the soft keyboard to get at and interact with obscured parts of the window.</td>
</tr>
</table>	

##Introduced in:##

API Level 1 for all attributes except for noHistory and windowSoftInputMode, which were added in API Level 3.

##See also:##

>    [Application](Manifest/Application.html)<br>
>    [Page Alias](Manifest/Page Alias.html)
