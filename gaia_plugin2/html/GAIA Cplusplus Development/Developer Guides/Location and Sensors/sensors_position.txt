<h1 itemprop="name">Position Sensors</h1>

The GAIA platform provides two sensors that let you determine the position of a device: the geomagnetic field sensor and the orientation sensor. The GAIA platform also provides a sensor that lets you determine how close the face of a device is to an object (known as the proximity sensor). The geomagnetic field sensor and the proximity sensor are hardware-based. Most handset and tablet manufacturers include a geomagnetic field sensor. Likewise, handset manufacturers usually include a proximity sensor to determine when a handset is being held close to a user's face (for example, during a phone call). The orientation sensor is software-based and derives its data from the accelerometer and the geomagnetic field sensor.

> <strong>Note:</strong> The orientation sensor was deprecated.

Position sensors are useful for determining a device's physical position in the world's frame of reference. For example, you can use the geomagnetic field sensor in combination with the accelerometer to determine a device's position relative to the magnetic North Pole. You can also use the orientation sensor (or similar sensor-based orientation methods) to determine a device's position in your application's frame of reference. Position sensors are not typically used to monitor device movement or motion, such as shake, tilt, or thrust (for more information, see <a href="../../../../d2/dae/classgaia_1_1system_1_1_sensor_event_listener.html">Motion Sensors</a>).

The geomagnetic field sensor and orientation sensor return multi-dimensional arrays of sensor values for each <code><a href="/gaia/reference/android/hardware/SensorEvent.html">SensorEvent</a></code>. For example, the orientation sensor provides geomagnetic field strength values for each of the three coordinate axes during a single sensor event. Likewise, the orientation sensor provides azimuth (yaw), pitch, and roll values during a single sensor event. For more information about the coordinate systems that are used by sensors, see <a href="../../../../da/d4e/classgaia_1_1system_1_1_sensor_utility.html">Sensor Coordinate Systems</a>. The proximity sensor provides a single value for each sensor event. Table 1 summarizes the position sensors that are supported on the GAIA platform.

<p class="table-caption" id="table1">
  <strong>Table 1.</strong> Position sensors that are supported on the GAIA platform.
<table>
  <tbody><tr>
    <th scope="col" style="white-space: nowrap;">Sensor</th>
    <th scope="col" style="white-space: nowrap;">Sensor event data</th>
    <th scope="col" style="white-space: nowrap;">Description</th>
    <th scope="col" style="white-space: nowrap;">Units of measure</th>
  </tr>
  <tr>
    <td rowspan="3"><code><a href="../../../../d8/d36/classgaia_1_1system_1_1_sensor_manager.html#af69c3f2b70149e6d1c3ee88234d7b092aa98182bc673dc00f20a2ed1261045f16">TYPE_MAGNETIC_FIELD</a></code></td>
    <td><code>SensorEvent.values[0]</code></td>
    <td>Geomagnetic field strength along the x axis.</td>
    <td rowspan="3">Î¼T</td>
  </tr>
  <tr>
    <td><code>SensorEvent.values[1]</code></td>
    <td>Geomagnetic field strength along the y axis.</td>
  </tr>
  <tr>
    <td><code>SensorEvent.values[2]</code></td>
    <td>Geomagnetic field strength along the z axis.</td>
  </tr>
  <tr>
    <td><code>SensorEvent.values[1]</code></td>
    <td>Pitch (angle around the x-axis).</td>
  </tr>
  <tr>
    <td><code>SensorEvent.values[2]</code></td>
    <td>Roll (angle around the y-axis).</td>
  </tr>
  <tr>
    <td><code><a href="../../../../d8/d36/classgaia_1_1system_1_1_sensor_manager.html#af69c3f2b70149e6d1c3ee88234d7b092af942823ee5fe89e88c9cee66260346c6">TYPE_PROXIMITY</a></code></td>
    <td><code>SensorEvent.values[0]</code></td>
    <td>Distance from object.<sup>1</sup></td>
    <td>cm</td>
  </tr>
</tbody></table>
</p>

> <sup><strong>1</strong></sup> Some proximity sensors provide only binary values representing near and far.

<h2 style="margin-bottom: 0px;" id="sensors-pos-orient">Using the Orientation Sensor</h2>

The orientation sensor lets you monitor the position of a device relative to the earth's frame of reference (specifically, magnetic north). The following code shows you how to get an instance of the default orientation sensor :

<pre class="prettyprint"><span class="kwd">private</span><span class="pln"> </span><span class="typ">SensorManager</span><span class="pln"> mSensorManager</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Sensor</span><span class="pln"> mSensor</span><span class="pun">;</span><span class="pln"><br></span><span class="pun">...</span><span class="pln"><br>mSensorManager </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">SensorManager</span><span class="pun">)</span><span class="pln"> getSystemService</span><span class="pun">(</span><span class="typ">Context</span><span class="pun">.</span><span class="pln">SENSOR_SERVICE</span><span class="pun">);</span><span class="pln"><br>mSensor </span><span class="pun">=</span><span class="pln"> mSensorManager</span><span class="pun">.</span><span class="pln">getDefaultSensor</span><span class="pun">(</span><span class="typ">Sensor</span><span class="pun">.</span><span class="pln">TYPE_ORIENTATION</span><span class="pun">);</span></pre>

The orientation sensor derives its data by using a device's geomagnetic field sensor in combination with a device's accelerometer. Using these two hardware sensors, an orientation sensor provides data for the following three dimensions:

*   Azimuth (degrees of rotation around the z axis). This is the angle between magnetic north and the device's y axis. For example, if the device's y axis is aligned with magnetic north this value is 0, and if the device's y axis is pointing south this value is 180. Likewise, when the y axis is pointing east this value is 90 and when it is pointing west this value is 270.</li>
*   Pitch (degrees of rotation around the x axis). This value is positive when the positive z axis rotates toward the positive y axis, and it is negative when the positive z axis rotates toward the negative y axis. The range of values is 180 degrees to -180 degrees.
*   Roll (degrees of rotation around the y axis). This value is positive when the positive z axis rotates toward the positive x axis, and it is negative when the positive z axis rotates toward the negative x axis. The range of values is 90 degrees to -90 degrees.

This definition is different from yaw, pitch, and roll used in aviation, where the X axis is along the long side of the plane (tail to nose). Also, for historical reasons the roll angle is positive in the clockwise direction (mathematically speaking, it should be positive in the counter-clockwise direction).

The orientation sensor derives its data by processing the raw sensor data from the accelerometer and the geomagnetic field sensor. Because of the heavy processing that is involved, the accuracy and precision of the orientation sensor is diminished (specifically, this sensor is only reliable when the roll component is 0). As a result, the orientation sensor was deprecated in GAIA 2.2 (API level 8). Instead of using raw data from the orientation sensor, we recommend that you use the <code><a href="../../../../da/d4e/classgaia_1_1system_1_1_sensor_utility.html#ac503bfbf3bd3ccb4b5ef1c5f2e63b0a8">getRotationMatrix()</a></code> method in conjunction with the <code><a href="../../../../da/d4e/classgaia_1_1system_1_1_sensor_utility.html#a6d1f396404335c01922e0d07edfc1888">getOrientation()</a></code> method to compute orientation values. You can also use the <code><a href="../../../../da/d4e/classgaia_1_1system_1_1_sensor_utility.html#aa1d1ac9ad458bd6754d3426552197dc0">remapCoordinateSystem()</a></code> method to translate the orientation values to your application's frame of reference.

The following code sample shows how to acquire orientation data directly from the orientation sensor. We recommend that you do this only if a device has negligible roll.

	public class SensorActivity extends Activity implements SensorEventListener {

		private SensorManager mSensorManager;
		private Sensor mOrientation;

		@Override
		public void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			setContentView(R.layout.main);

			mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
			mOrientation = mSensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION);
		}

		@Override
		public void onAccuracyChanged(Sensor sensor, int accuracy) {
			// Do something here if sensor accuracy changes.
			// You must implement this callback in your code.
		}

		@Override
		protected void onResume() {
			super.onResume();
			mSensorManager.registerListener(this, mOrientation, SensorManager.SENSOR_DELAY_NORMAL);
		}

		@Override
		protected void onPause() {
			super.onPause();
			mSensorManager.unregisterListener(this);
		}

		@Override
		public void onSensorChanged(SensorEvent event) {
			float azimuth_angle = event.values[0];
			float pitch_angle = event.values[1];
			float roll_angle = event.values[2];
			// Do something with these orientation angles.
		}
	}

You do not usually need to perform any data processing or filtering of the raw data that you obtain from an orientation sensor, other than translating the sensor's coordinate system to your application's frame of reference. The <a href="/gaia/resources/samples/AccelerometerPlay/index.html">Accelerometer Play</a> sample shows you how to translate acceleration sensor data into another frame of reference; the technique is similar to the one you might use with the orientation sensor.

<h2 style="margin-bottom: 0px;" id="sensors-pos-mag">Using the Geomagnetic Field Sensor</h2>

The geomagnetic field sensor lets you monitor changes in the earth's magnetic field. The following code shows you how to get an instance of the default geomagnetic field sensor:

	private SensorManager mSensorManager;
	private Sensor mSensor;
	...
	mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
	mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);

This sensor provides raw field strength data (in Î¼T) for each of the three coordinate axes. Usually, you do not need to use this sensor directly. Instead, you can use the rotation vector sensor to determine raw rotational movement or you can use the accelerometer and geomagnetic field sensor in conjunction with the <code><a href="../../../../da/d4e/classgaia_1_1system_1_1_sensor_utility.html#ac503bfbf3bd3ccb4b5ef1c5f2e63b0a8">getRotationMatrix()</a></code> method to obtain the rotation matrix and the inclination matrix. You can then use these matrices with the <code><a href="../../../../da/d4e/classgaia_1_1system_1_1_sensor_utility.html#a6d1f396404335c01922e0d07edfc1888">getOrientation()</a></code> and <code><a href="../../../../da/d4e/classgaia_1_1system_1_1_sensor_utility.html#a3da5f25e06f0d14d34fa2f9ee88d09b0">getInclination()</a></code> methods to obtain azimuth and geomagnetic inclination data.

<h2 style="margin-bottom: 0px;" id="sensors-pos-prox">Using the Proximity Sensor</h2>

The proximity sensor lets you determine how far away an object is from a device. The following code shows you how to get an instance of the default proximity sensor:

	private SensorManager mSensorManager;
	private Sensor mSensor;
	...
	mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
	mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);

The proximity sensor is usually used to determine how far away a person's head is from the face of a handset device (for example, when a user is making or receiving a phone call). Most proximity sensors return the absolute distance, in cm, but some return only near and far values. The following code shows you how to use the proximity sensor:

	public class SensorActivity extends Activity implements SensorEventListener {
		private SensorManager mSensorManager;
		private Sensor mProximity;

		@Override
		public final void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			setContentView(R.layout.main);

			// Get an instance of the sensor service, and use that to get an instance of
			// a particular sensor.
			mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
			mProximity = mSensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
		}

		@Override
		public final void onAccuracyChanged(Sensor sensor, int accuracy) {
			// Do something here if sensor accuracy changes.
		}

		@Override
		public final void onSensorChanged(SensorEvent event) {
			float distance = event.values[0];
			// Do something with this sensor data.
		}

		@Override
		protected void onResume() {
			// Register a listener for the sensor.
			super.onResume();
			mSensorManager.registerListener(this, mProximity, SensorManager.SENSOR_DELAY_NORMAL);
		}

		@Override
		protected void onPause() {
			// Be sure to unregister the sensor when the activity pauses.
			super.onPause();
			mSensorManager.unregisterListener(this);
		}
	}

> <strong>Note:</strong> Some proximity sensors return binary values that represent "near" or "far." In this case, the sensor usually reports its maximum range value in the far state and a lesser value in the near state. Typically, the far value is a value &gt; 5 cm, but this can vary from sensor to sensor. You can determine a sensor's maximum range by using the <code><a href="../../../../d8/d36/classgaia_1_1system_1_1_sensor_manager.html#a2911813e905f042cb4dce143ab01c124">getMaximumRange()</a></code> method.

<p style="margin-left:20px;font-style:italic">
 Portions of this page are modifications based on work created and <a href="http://code.google.com/policies.html">shared by the Android Open
 Source Project</a> and used according to terms described in the <a href="http://creativecommons.org/licenses/by/2.5/">Creative Commons
 2.5 Attribution License</a>.
</p>

