# App Folder Layout #
![](APP_FOLDER_LAYOUT_WINDOWS.jpg)

# HelloWorld/Makefile #

<pre>
# This file is only used to build apps under GAIA SDK
SDK_ROOT := D:/GAIASDK
PROJECT_ROOT := D:/workspace
SDK_VERSION := 6
DEFAULT_APP_TARGET_SDK := 16
SHELL := D:/GAIASDK/prebuilt/windows-x86/cygwin/bin/bash.exe
SDK_INCLUDE := $(SDK_ROOT)/include/
include $(SDK_ROOT)/build/core/main.mk
include $(PROJECT_ROOT)/Gaia.mk
</pre>

**SDK_ROOT** is the first var you should set in Makefile. Its value represents the location of GAIA SDK. (Currently, our SDK is provided in a zip package. You should unzip it). **SDK_ROOT** tells make where to find need build-scripts which help to build your Gaia app. **PROJECT_ROOT** stores the root path of your app project.  **SDK_VERSION** stores the version number of your SDK. You should not change the value of **DEFAULT_APP_TARGET_SDK**, **SHELL** and **SDK_INCLUDE**.

**include$(SDK_ROOT)/build/core/main.mk**

This is the entry point of SDK build scripts. YOU SHOULD NOT CHANGE THIS LINE.

**include $(PROJECT_ROOT)/Gaia.mk**

Include the root Gaia.mk in your project

# HelloWorld/Gaia.mk #
<pre>
LOCAL_PATH := $(call my-dir)
include $(CLEAR_VARS)
LOCAL_PACKAGE_NAME := HelloWorld
LOCAL_GAIA_SHARED_LIBRARIES := libHelloWorld
LOCAL_CERTIFICATE := platform
include $(BUILD_GAIA_PACKAGE)
include $(LOCAL_PATH)/src/Gaia.mk
</pre>

**LOCAL_PACKAGE_NAME := HelloWorld**

LOCAL_PACKAGE_NAME will be used for final apk name. This is called HelloWorld, so the final apk will be "HelloWorld.apk" in $(PROJECT_ROOT)/out/release/bin/

**LOCAL_GAIA_SHARED_LIBRARIES := libHelloWorld**

This is used as final so file name. For this app, ths so name is "libHelloWorld.so"

**LOCAL_CERTIFICATE := platform**

This is used as final so file name. For this app, the so name is "libHelloWorld.so"


**include $(BUILD_GAIA_PACKAGE)**

You always need this line to build the final apk.YOU SHOULD NOT CHANGE THIS LINE.

**include $(LOCAL_PATH)/src/Gaia.mk**

Include Gaia.mk, which in turn builds the so file

# HelloWorld/Gaia.xml #
<pre>
&lt;?xml version="1.0" encoding="utf-8"?>

&lt;manifest xmlns:gaia="http://schemas.gaia.com/pkg/res/gaia"
   package="helloworld"
   gaia:isGaiaPackage="true"
   gaia:isGaiaPackage="true"
   gaia:gaiaApiVersion="1"
   gaia:versionCode="1"
   gaia:versionName="1.0">

   &lt;skip-erased />
      &lt;application gaia:icon="@drawable/icon" gaia:label="@string/app_name" gaia:debuggable="true">
      &lt;page gaia:name=".HelloWorld" gaia:label="@string/app_name">
          &lt;demand-filter>
              &lt;action gaia:name="android.intent.action.MAIN" />
              &lt;category gaia:name="android.intent.category.LAUNCHER" />
          &lt;/demand-filter>
      &lt;/page>
  &lt;/application>
  &lt;uses-sdk gaia:minSdkVersion="7" />
&lt;/manifest>
</pre>
Every application must have a Gaia.xml file (with precisely that name) in its root directory. The manifest presents essential information about the application to the GAIA system -- information the system must have before it can run any of the application's code. For details refer to [AndroidManifest](http://developer.android.com/guide/topics/manifest/manifest-intro.html).

# HelloWorld/res #
You should place each type of resource in a specific subdirectory of your project's res/ directory. For details refer [RESOURCES](http://developer.android.com/guide/topics/resources/index.html)

# HelloWorld/src/HelloWorld.h #
<pre>
\#pragma once
\#include &lt;gaia/core/Page.h>

namespace gaia {
    namespace core {
        class Persistence;
    }
    namespace ui {
        class LinearController;
        class TextWidget;
    }
}

class HelloWorld: public gaia::core::Page {
  public:
    HelloWorld();
    ~HelloWorld();
  protected:
    virtual void onInit(gaia::core::Persistence\* const p);
    virtual void onTear();
  private:
    gaia::ui::LinearController\* mpCtrl;
    gaia::ui::TextWidget\* mpText;
};
</pre>
# HelloWorld/src/HelloWorld.cpp #
<pre>
\#define DEBUG_LEVEL 0
\#define LOG_TAG "HelloWorldSample"

\#include &lt;gaia/core/Context.h>
\#include &lt;gaia/core/Persistence.h>
\#include &lt;gaia/core/vision/Scene.h>
\#include &lt;gaia/ui/LinearController.h>
\#include &lt;gaia/ui/TextWidget.h>
\#include &lt;gaia/base/String.h>
\#include "HelloWorld.h"
\#include "helloworld/R.h"

using namespace gaia::core;
using namespace gaia::ui;
using namespace gaia::base;

  HelloWorld::HelloWorld() :
    mpCtrl(NULL),
    mpText(NULL) {
}

  HelloWorld::~HelloWorld() {
}

void HelloWorld::onInit(Persistence\* const p) {
    Scene\* pScene = Scene::SceneFactory(this);

    mpText = new TextWidget(this);
    mpText->setText(helloworld::R::string::app_name);
    mpText->setTextSize(30);

    mpCtrl = new LinearController(this);
    mpCtrl->addWidget(mpText);

    pScene->attachController(mpCtrl);
    pScene->setupSceneLayout();
}

void HelloWorld::onTear() {
    delete mpCtrl;
    delete mpText;
    getSceneSingleton()->SceneDestroy();
}

template class Export&lt;HelloWorld, Page>;
</pre>

# HelloWorld/src/Gaia.mk #
<pre>
LOCAL_PATH := $(call my-dir)
include $(CLEAR_VARS)
LOCAL_MODULE := libHelloWorld
LOCAL_GAIA_R_PACKAGES :=  HelloWorld
LOCAL__PACKAGE_NAME := HelloWorld
LOCAL_MODULE_TAGS := optional
LOCAL_PRELINK_MODULE := false
LOCAL_SRC_FILES := 	HelloWorld.cpp
LOCAL_SHARED_LIBRARIES := libapi.$(strip $(SDK_VERSION))
include $(BUILD_SHARED_LIBRARY)
</pre>
**Top three line must be set and in front of all other lines.**

**LOCAL_GAIA_R_PACKAGES :=  HelloWorld**

This is very important.  If you want use the resource HelloWorld here(your resource, THIS NAME SHOULD BE THE SAME AS THE$(LOCAL_PACKAGE_NAME) YOU SET IN Makefile for var LOCAL_GAIA_R_PACKAGES.

**LOCAL_SRC_FILES := 	HelloWorld.cpp**

You should pull all source file need to compile into so in LOCAL_SRC_FILES

**LOCAL_PRELINK_MODULE := false**

YOU SHOULD NOT CHANGE THIS.

**LOCAL_SHARED_LIBRARIES := libapi.$(strip $(SDK_VERSION))**

Put all the dependent so in LOCAL_SHARD_LIBRARIES. All SDK provided libs located in $(SDK_ROOT)lib. DO NOT ADD A SUFFIX .SO is in here.

**include $(BUILD_SHARED_LIBRARY)**

This includes the real script required to build the so file. DO NOT CHANGE THIS

# Build HelloWorld#
**Build steps**

**1. add system environment variables**

Add some environment variables into your system environment as following:
<pre>
Path=C:\Program Files\Java\jdk1.6.0_37\bin;$(SDK_ROOT)\prebuilt\windows-x86\cygwin\bin;$(SDK_ROOT)\prebuilt\windows-x86\bin
(these variables should be added to the front of the original variables)
CYGWIN=nodosfilewarning
</pre>
**2. open shell, then cd $(PROJECT_ROOT)**

Switch project folder of helloworld in shell. $(PROJECT_ROOT) is the root folder of helloworld

**3. Create gen/R**

Create gen/R folder, which will be used to put R.h, R.cpp

**4. Use the following command to generate the needed resource code**

$(SDK_ROOT)/prebuilt/windows-x86/bin/aapt package -z -m -J $(PROJECT_ROOT)/gen/R -A $(PROJECT_ROOT)/assets -M $(PROJECT_ROOT)/Gaia.xml -S $(PROJECT_ROOT)/res -I $(SDK_ROOT)/data/res/gaia-framework-res-common.pkg -I $(SDK_ROOT)/data/res/gaia-framework-res.pkg

**Please use real path substitutes $(SDK_ROOT) and $(PROJECT_ROOT) **

**5. Type make and hit ENTER in the shell**

make command: $(SDK_ROOT)\prebuilt\windows-x86\bin\make.exe -f $(PROJECT_ROOT)/out/release/obj/Makefile
 After the these steps, you can find the final pkg under $(PROJECT_ROOT)/out/release/bin


# Install HelloWorld #
Follow these steps to install apk in devices:

1. $(SDK_ROOT)/prebuilt/linux-x86/bin/adb devices

   By this command, we can check if the device connected to the pc correctly

2. $(SDK_ROOT)/prebuilt/linux-x86/bin/adb install $(PROJECT_ROOT)/out/release/bin/HelloWorld.pkg


